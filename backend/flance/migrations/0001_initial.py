# Generated by Django 3.0.7 on 2020-07-04 10:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_freelancer', models.BooleanField(default=False)),
                ('is_employer', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('tech', models.CharField(max_length=50, verbose_name='Technology used')),
                ('desc', models.CharField(max_length=200, verbose_name='Description')),
                ('link', models.URLField(verbose_name='Project URL')),
                ('ss', models.ImageField(blank=True, upload_to='', verbose_name='ScreenShot')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('mode', models.CharField(choices=[('ftime', 'Full-Time'), ('ptime', 'Part-Time')], max_length=5, verbose_name='Mode')),
                ('etc', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(2000)], verbose_name='Estimated time for completion (Hrs)')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
            },
        ),
        migrations.CreateModel(
            name='Freelancer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dp', models.ImageField(blank=True, upload_to='', verbose_name='Profile Pic')),
                ('languages', models.CharField(choices=[('VISUAL_BASIC_NET', 'Visual Basic .NET'), ('OBJECTIVE_C', 'Objective-C'), ('JAVASCRIPT', 'JavaScript'), ('PYTHON', 'Python'), ('C_HASH', 'C#'), ('SWIFT', 'Swift'), ('JAVA', 'Java'), ('RUBY', 'Ruby'), ('PERL', 'Perl'), ('CPP', 'C++'), ('PHP', 'PHP'), ('SQL', 'SQL'), ('GO', 'Go'), ('C', 'C'), ('R', 'R')], max_length=50, verbose_name='Languages')),
                ('specialization', models.CharField(choices=[('DJANGO', 'Django'), ('NODEJS', 'Nodejs'), ('ELECTRON', 'Electron'), ('FLASK', 'Flask'), ('ROR', 'Ruby on Rails'), ('PHP_Cake', 'PHP Cake'), ('BOTTLE', 'Bottle'), ('ML', 'Machine Learning'), ('AI', 'Artificial Intelligence')], max_length=50, verbose_name='Specialization')),
                ('fields', models.CharField(choices=[('ANDROID_APP', 'Android App Developer'), ('WIN_PC_APP', 'Windows Desktop App Developer'), ('MAC_PC_APP', 'Mac Desktop App Developer'), ('IOS_APP', 'iOS App Developer'), ('WEB_APP', 'Web App Developer'), ('DS', 'Data Science')], max_length=50, verbose_name='Fields')),
                ('side', models.CharField(choices=[('FED', 'Front End Developer'), ('BED', 'Back End Developer'), ('FSD', 'Full Stack Developer')], max_length=50, verbose_name='Side')),
                ('level', models.CharField(choices=[('FRS', 'Fresher'), ('EXP', 'Experienced'), ('PRO', 'Pro')], max_length=20, verbose_name='Level')),
                ('salary', models.IntegerField(default=250, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(250)], verbose_name='Salary')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='freelancer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelancer',
                'verbose_name_plural': 'Freelancers',
            },
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dp', models.ImageField(blank=True, upload_to='', verbose_name='Profile Pic')),
                ('company', models.CharField(max_length=100, verbose_name='Company')),
                ('location', models.CharField(max_length=30, verbose_name='Location')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Employer',
                'verbose_name_plural': 'Employers',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages', models.CharField(choices=[('VISUAL_BASIC_NET', 'Visual Basic .NET'), ('OBJECTIVE_C', 'Objective-C'), ('JAVASCRIPT', 'JavaScript'), ('PYTHON', 'Python'), ('C_HASH', 'C#'), ('SWIFT', 'Swift'), ('JAVA', 'Java'), ('RUBY', 'Ruby'), ('PERL', 'Perl'), ('CPP', 'C++'), ('PHP', 'PHP'), ('SQL', 'SQL'), ('GO', 'Go'), ('C', 'C'), ('R', 'R')], max_length=50, verbose_name='Languages')),
                ('specialization', models.CharField(choices=[('DJANGO', 'Django'), ('NODEJS', 'Nodejs'), ('ELECTRON', 'Electron'), ('FLASK', 'Flask'), ('ROR', 'Ruby on Rails'), ('PHP_Cake', 'PHP Cake'), ('BOTTLE', 'Bottle'), ('ML', 'Machine Learning'), ('AI', 'Artificial Intelligence')], max_length=50, verbose_name='Specialization')),
                ('fields', models.CharField(choices=[('ANDROID_APP', 'Android App Developer'), ('WIN_PC_APP', 'Windows Desktop App Developer'), ('MAC_PC_APP', 'Mac Desktop App Developer'), ('IOS_APP', 'iOS App Developer'), ('WEB_APP', 'Web App Developer'), ('DS', 'Data Science')], max_length=50, verbose_name='Fields')),
                ('side', models.CharField(choices=[('FED', 'Front End Developer'), ('BED', 'Back End Developer'), ('FSD', 'Full Stack Developer')], max_length=50, verbose_name='Side')),
                ('level', models.CharField(choices=[('FRS', 'Fresher'), ('EXP', 'Experienced'), ('PRO', 'Pro')], max_length=20, verbose_name='Level')),
                ('salary', models.IntegerField(default=250, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(250)], verbose_name='Salary')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flance.Job')),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
            },
        ),
    ]
